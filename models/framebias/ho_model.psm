%%%%%%%%%%%%%%%%
%%% ho_model.psm PRISM probabilistic model underlying frameseq
%%%%%%%%%%%%%%%

%%%%%%
% extended delete-HMM structure with frame-states and score emissions
%%%%%%%

%%% higher order mixed memory delete-HMM versions

%%% with changed recursive structure for emissions and transitions:
%% values declaration of trans changed to 2 arguments
%% recursive structure of trans changed to transitions conditioned on:
% state and previous_state
% with changes to initiation also...

:-set_prism_flag(log_scale,on).
%:-set_prism_flag(log_viterbi,on). % PRISM 1
% Using vb seems to give an undesired effect with the pseudo-counts 
% To much smoothing I expect...
%:-set_prism_flag(learn_mode,params).  
:-set_prism_flag(learn_mode,both).  

%msw(X,Y) :- values(X,Z), member(Y,Z).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Constraint management
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

max_consequtive_deletes(1000). % Real is 888

init_store :-
   asserta(store(0)).

forward_store(S) :-
   asserta(store(S))
   ;
   retract(store(S)).

%% get_store(S)
%
% Get the current store
get_store(S) :- !, store(S).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Reporting progress 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

nop.
report_step(1000).

report_progress :-
        program_counter(C),
        retractall(program_counter(_)),
        report_step(StepSize),
        RotStep is C mod StepSize,
        ((RotStep==0) ->
                write(C),nl,
                write(garbage_collecting),nl,
                garbage_collect,
                statistics
                ;
                nop
                ),
        C1 is C + 1,
        assert(program_counter(C1)).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Lists as integers management
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

assert_list(List) :-
        assert_list(1,List).

assert_list(MaxIdx,[]) :-
        assert(end_of_list(MaxIdx)).

assert_list(Idx,[E|Es]) :-
       assert(list_elem(Idx,E)),
       NxtIdx is Idx + 1,
       assert_list(NxtIdx,Es).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% For learning with a single switch at a time
dummy_pgoal(SwName,Outcome) :-
        msw(SwName,Outcome).

%toggle_disable_delete(yes) :-
%	retractall(disable_delete(_)),
%	assert(disable_delete(S)).
	
%toggle_disable_delete(no) :-
%	retractall(disable_delete(_)).

  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%% Values decls %%%%%%%%%%%%%%%%%%%%%%%%
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

frames([1,2,3,4,5,6]).

% initiation transition:
values(trans(begin),[1,2,3,4,5,6]).

% parameters of model:
values(trans(_,_),Frames) :-
        frames(Frames).

% The score is emitted from the frame
values(emit(F), SC) :-
        F \= delete,
        frames(Frames),
        member(F,Frames),
        score_categories(SC).
        
values(emit(delete),Outcomes) :-
        score_categories(SC),
        frames(Frames),
        findall((F,S), (member(F,Frames), member(S,SC)), Outcomes).

values(goto_delete,[yes,no]).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%% Model definition %%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Initiation:
model(Observations):-
   % select initial frame:
   % Can probably just have uniform probability
   retractall(list_elem(_,_)),
   retractall(end_of_list(_)),
   %retractall(store(_)),
   %retractall(program_counter(_)),
   %init_store,
   %assert(program_counter(1)),
   assert_list(Observations),
   write('asserted list..'),nl,
   !,
   %% changed:
   msw(trans(begin),First_Frame),
   recursion(First_Frame,b,0). % before first elem of list

% recursion structure:
% base case: The largest element in the list has already been processed
recursion(_,_,ListIdx) :-
        EOL is ListIdx + 1, % one larger than index of largest element in list
        end_of_list(EOL).

% recursive case:
recursion(F,P,ListIdx) :-
   end_of_list(EOL),
   %write(ListIdx), write('-'), write(EOL),nl,
   ListIdx < EOL,
   %(debug_enabled(true) -> report_progress ; true),
%   catch(disable_delete(DisableDelete),_,DisableDelete=no),
%    ((DisableDelete==yes) ->
%            GotoDel = no
%            ;
%   msw(goto_delete,GotoDel)),
   msw(goto_delete,GotoDel),
   ((GotoDel == yes) -> 
        recursion_delete(F,P,ListIdx) 
        ;
        recursion_frame(F,P,ListIdx)).

% Matching true positives
recursion_frame(F,Previous_frame,ListIdx) :-
     %write(recursion_frame(F,ListIdx)),nl,
     % ############## changed from model.psm::  
     msw(emit(F),Score),
     msw(trans(F,Previous_frame), NextFrame),
     %msw(emit(NextFrame),Score),
     %
     NextListIdx is ListIdx + 1,
     (learn_mode(true) ->
        list_elem(NextListIdx,true_positive(NextFrame,Score))
        ;
        list_elem(NextListIdx,(NextFrame,Score))),
     %write(keep(NextListIdx)),
     recursion(NextFrame,F,NextListIdx).

% Matching false positives
recursion_delete(Frame,P,ListIdx) :-
    %write(recursion_delete(Frame,ListIdx)),nl,
    NextListIdx is ListIdx + 1,
    (learn_mode(true) ->
        list_elem(NextListIdx,false_positive(NextFrame,Score))
        ;
        list_elem(NextListIdx,(NextFrame,Score))),
    msw(emit(delete), (NextFrame,Score)),
    %write(delete(NextListIdx)),
    recursion(Frame,P,NextListIdx).
